#include <inttypes.h>
#include <stdio.h>
#include "drivers/CoreUARTapb/core_uart_apb.h"
#include "drivers/mss_gpio/mss_gpio.h"
#include "suit.h"
#include "menu.h"
#include "midi.h"
#include "lcd.h"

UART_instance_t XBee_uart, MIDI_uart, LCD_uart;

XBeeState xbeeState;
MIDIState midiState;
SuitState suitState;
Settings settings;

// XBee RX Interrupt
__attribute__ ((interrupt)) void GPIO0_IRQHandler( void )
{
	uint8_t rx_data[MAX_RX_DATA_SIZE];
	uint8_t rx_size = 0;
	//uint8_t err_status;
	volatile int i;
	int index = XBEE_PACKET_AVERAGE - 1;

	//printf("XBee RX Interrupt Fired\n\r");

	while((MSS_GPIO_get_inputs() & 0x01) == 1) {
		rx_size = UART_get_rx(&XBee_uart, rx_data, MAX_RX_DATA_SIZE);
		/*err_status = UART_get_rx_status(&XBee_uart);
		if (err_status != 0) {
			//printf("MIDI UART error with code %u\n\r", err_status);
			return;
		}*/
		if (rx_size >= 1) {
			for (i = 0; i < rx_size; i++) {
				if (xbeeState.packetPointer >= XBEE_PACKET_LENGTH) {
					xbeeState.valid = 0;
					xbeeState.packetPointer = 0;
				}
				if (xbeeState.valid == 1) {
					// New packet is found
					if (rx_data[i] == 0xFF) {
						if (xbeeState.packetPointer != XBEE_PACKET_LENGTH) {
							// The XBee state has been invalidated, reset packet
							xbeeState.valid = 0;
						} else {
							// New packet coming in, reset packet pointer
							xbeeState.packetPointer = 0;
						}
					}
				} else {
					// Check for next packet
					if (rx_data[i] == 0xFF) {
						xbeeState.packetPointer = 0;
						xbeeState.valid = 1;
					}
				}

				xbeeState.data[index][xbeeState.packetPointer++] = rx_data[i];

				// XBee state is valid and we have a full packet
				if (xbeeState.valid == 1 && xbeeState.packetPointer == XBEE_PACKET_LENGTH) {
					if (xbeeState.data[index][0] == 0xFF && xbeeState.data[index][1] == 0xA0 && xbeeState.data[index][2] == 0xB7) {
						if (xbeeState.data[index][7] < settings.handHeightMin) {
							xbeeState.data[index][7] = settings.handHeightMin;
						} else if (xbeeState.data[index][7] > settings.handHeightMax) {
							xbeeState.data[index][7] = settings.handHeightMax;
						}
						suitState.accelX = Suit_getAveragedValue(3);
						suitState.accelY = Suit_getAveragedValue(4);
						suitState.accelZ = Suit_getAveragedValue(5);
						suitState.flexValue = Suit_getAveragedValue(6);
						suitState.handHeight = Suit_getAveragedValue(7);
						Suit_shiftXBeePackets();
					}
				}
			}
		}
	}

	/*printf("Receiving %u bytes of data\n\r", rx_index);
	for (i = 0; i < rx_index; i++) {
		printf("Data byte %u was %#x\n\r", i, final_data[i]);
	}*/

    MSS_GPIO_clear_irq(MSS_GPIO_0);
    NVIC_ClearPendingIRQ(GPIO0_IRQn);
}

// MIDI RX Interrupt
__attribute__ ((interrupt)) void GPIO1_IRQHandler( void )
{
	uint8_t rx_data[MAX_RX_DATA_SIZE];
	uint8_t rx_size = 0;
	//uint8_t err_status;
	volatile int i;

	//printf("MIDI RX Interrupt Fired\n\r");


	while(((MSS_GPIO_get_inputs() >> 1) & 0x01) == 1) {
		//printf("Receiving data from MIDI\n\r");
		rx_size = UART_get_rx(&MIDI_uart, rx_data, MAX_RX_DATA_SIZE);
		/*err_status = UART_get_rx_status(&MIDI_uart);
		if (err_status != 0) {
			//printf("MIDI UART error with code %u\n\r", err_status);
			return;
		}*/
		if (rx_size >= 1) {
			for (i = 0; i < rx_size; i++) {
				if (midiState.packetPointer >= MIDI_PACKET_LENGTH) {
					midiState.valid = 0;
					midiState.packetPointer = 0;
				}
				if (midiState.valid == 1) {
					// New packet is found
					if (((rx_data[i] >> 7) & 0x1) == 1 && (rx_data[i] & 0xF) == settings.suitLightsMIDIChannel) {
						if (midiState.packetPointer != MIDI_PACKET_LENGTH) {
							// The MIDI state has been invalidated, reset packet
							midiState.valid = 0;
						} else {
							// New packet coming in, reset packet pointer
							midiState.packetPointer = 0;
						}
					}
				} else {
					// Check for next packet
					if (((rx_data[i] >> 7) & 0x1) == 1 && (rx_data[i] & 0xF) == settings.suitLightsMIDIChannel) {
						midiState.packetPointer = 0;
						midiState.valid = 1;
					}
				}

				midiState.data[midiState.packetPointer++] = rx_data[i];

				// MIDI state is valid and we have a full packet
				if (midiState.valid == 1 && midiState.packetPointer == MIDI_PACKET_LENGTH) {
					Suit_handleMIDIMessage(midiState.data, MIDI_PACKET_LENGTH);
				}
			}
		}

		if (suitState.lightsHaveChanged == 1) {
			UART_send(&XBee_uart, (const uint8_t *)&suitState.activeLights, 1);
			suitState.lightsHaveChanged = 0;
		}

	}

    //printf("Finishing MIDI RX interrupt\n\r");
    MSS_GPIO_clear_irq(MSS_GPIO_1);
    NVIC_ClearPendingIRQ(GPIO1_IRQn);
}

// CapButton Interrupt
__attribute__ ((interrupt)) void GPIO2_IRQHandler( void )
{
	uint8_t buttonState = ((MSS_GPIO_get_inputs() >> 2) & 0x01);

	//printf("New CapButton state of %u\n\r", buttonState);

    if (buttonState == 1) {
    	Suit_capButtonPressed();
    } else {
    	Suit_capButtonReleased();
    }

    //printf("Finishing CapButton interrupt\n\r");
    MSS_GPIO_clear_irq(MSS_GPIO_2);
    NVIC_ClearPendingIRQ(GPIO2_IRQn);
}

// LPiezo Interrupt
__attribute__ ((interrupt)) void GPIO3_IRQHandler( void )
{
	//printf("LPiezo went high\n\r");

	Suit_LPiezoPressed();

    //printf("Finishing LPiezo interrupt\n\r");
    MSS_GPIO_clear_irq(MSS_GPIO_3);
    NVIC_ClearPendingIRQ(GPIO3_IRQn);
}

// RPiezo Interrupt
__attribute__ ((interrupt)) void GPIO4_IRQHandler( void )
{
	Suit_RPiezoPressed();

    MSS_GPIO_clear_irq(MSS_GPIO_4);
    NVIC_ClearPendingIRQ(GPIO4_IRQn);
}

// CButton0 Interrupt
__attribute__ ((interrupt)) void GPIO5_IRQHandler( void )
{
	Suit_CButton0Pressed();

    MSS_GPIO_clear_irq(MSS_GPIO_5);
    NVIC_ClearPendingIRQ(GPIO5_IRQn);
}

// CButton1 Interrupt
__attribute__ ((interrupt)) void GPIO6_IRQHandler( void )
{
	Suit_CButton1Pressed();

    MSS_GPIO_clear_irq(MSS_GPIO_6);
    NVIC_ClearPendingIRQ(GPIO6_IRQn);
}
// CButton2 Interrupt
__attribute__ ((interrupt)) void GPIO7_IRQHandler( void )
{
	Suit_CButton2Pressed();

    MSS_GPIO_clear_irq(MSS_GPIO_7);
    NVIC_ClearPendingIRQ(GPIO7_IRQn);
}
// CButton3 Interrupt
__attribute__ ((interrupt)) void GPIO8_IRQHandler( void )
{
	Suit_CButton3Pressed();

    MSS_GPIO_clear_irq(MSS_GPIO_8);
    NVIC_ClearPendingIRQ(GPIO8_IRQn);
}

// LCD Timer interrupt
__attribute__ ((interrupt)) void GPIO9_IRQHandler( void )
{
	if (suitState.state == PERFORMANCE) {
		Suit_updateStatus();
	}

    MSS_GPIO_clear_irq(MSS_GPIO_9);
    NVIC_ClearPendingIRQ(GPIO9_IRQn);
}

// MIDI interrupt
__attribute__ ((interrupt)) void GPIO10_IRQHandler( void )
{
	if (suitState.state == PERFORMANCE) {
		Suit_newSensorValues();
	}

    MSS_GPIO_clear_irq(MSS_GPIO_10);
    NVIC_ClearPendingIRQ(GPIO10_IRQn);
}

void Suit_init() {
	printf("\n\r\nr\r/\\/\\/\\/ WubSuit \\/\\/\\/\\\n\r");
	printf("Brian Daniels\n\r");
	printf("Patrick Hayes\n\r");
	printf("Brian Margosian\n\r");
	printf("Nick Tountasakis\n\r\n\r");

	suitState.waitingForInput = 0;
	suitState.noteActive = 0;
	suitState.okToWriteLcd = 0;

	xbeeState.valid = 0;
	xbeeState.packetPointer = 0;

	volatile int i, j;

	for (i = 0; i < XBEE_PACKET_AVERAGE; i++) {
		for (j = 0; j < XBEE_PACKET_LENGTH; j++) {
			xbeeState.data[i][j] = 0;
		}
	}

	midiState.valid = 0;
	midiState.packetPointer = 0;
	for (i = 0; i < MIDI_PACKET_LENGTH; i++) {
		midiState.data[i] = 0;
	}

	settings.suitLightMappings[0] = C0;
	settings.suitLightMappings[1] = CS0;
	settings.suitLightMappings[2] = D0;
	settings.suitLightMappings[3] = DS0;
	settings.suitLightMappings[4] = E0;
	settings.suitLightMappings[5] = F0;
	settings.suitLightMappings[6] = FS0;

	suitState.handHeight = 0;
	settings.handHeightMapping = 0;
	settings.handHeightMin = 150;
	settings.handHeightMax = 240;

	settings.LPiezoMapping = C2;
	settings.RPiezoMapping = CS2;

	settings.CButton1Mapping = D2;
	settings.CButton2Mapping = DS2;
	settings.CButton3Mapping = E2;

	settings.minNote = C4;
	settings.maxNote = C5;
	settings.keySignature = CHROMATIC;
	settings.suitLightsMIDIChannel = 0;
	settings.outputMIDIChannel = 0;
	settings.volumeMIDIControl = 0;
	settings.accelYMIDIControl = 1;

	settings.accelMin = 0;
	settings.accelMax = 0xFE;
	settings.pitchBendMin = 0;
	settings.pitchBendMax = 0x3FFF;

	suitState.lightsHaveChanged = 0;

	settings.flexMin = 0;
	settings.flexMax = 0xFE;

	settings.controlMin = 0;
	settings.controlMax = 127;

	/* Disable Watchdog Timer*/
	uint32_t * P_WDG_ENABLE = (uint32_t *)(0x40006010);
	*P_WDG_ENABLE = 0x4C6E55FA;

	printf("Initiating interrupts...\n\r");

	// Initialize GPIO
	MSS_GPIO_init();

	// Initialize XBee UART
	UART_init(&XBee_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200, (DATA_8_BITS | NO_PARITY));

	// Initialize MIDI UART
	UART_init(&MIDI_uart, COREUARTAPB1_BASE_ADDR, BAUD_VALUE_31250, (DATA_8_BITS | NO_PARITY));
	MIDI_init(&MIDI_uart);

	// Initialize LCD UART
	UART_init(&LCD_uart, COREUARTAPB2_BASE_ADDR, BAUD_VALUE_115200, (DATA_8_BITS | NO_PARITY));
	LCD_init(&LCD_uart);

	// Setup XBee RX interrupt
	MSS_GPIO_config(MSS_GPIO_0, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_0);
	NVIC_EnableIRQ(GPIO0_IRQn);

	// Setup MIDI RX interrupt
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_1);
	NVIC_EnableIRQ(GPIO1_IRQn);

	// Setup CapButton interrupt
	MSS_GPIO_config(MSS_GPIO_2, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_BOTH);
	MSS_GPIO_enable_irq(MSS_GPIO_2);
	NVIC_EnableIRQ(GPIO2_IRQn);

	// Setup LPiezo interrupt
	MSS_GPIO_config(MSS_GPIO_3, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_3);
	NVIC_EnableIRQ(GPIO3_IRQn);

	// Setup RPiezo interrupt
	MSS_GPIO_config(MSS_GPIO_4, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_4);
	NVIC_EnableIRQ(GPIO4_IRQn);

	// Setup CButton0 interrupt
	MSS_GPIO_config(MSS_GPIO_5, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_5);
	NVIC_EnableIRQ(GPIO5_IRQn);

	// Setup CButton1 interrupt
	MSS_GPIO_config(MSS_GPIO_6, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_6);
	NVIC_EnableIRQ(GPIO6_IRQn);

	// Setup CButton2 interrupt
	MSS_GPIO_config(MSS_GPIO_7, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_7);
	NVIC_EnableIRQ(GPIO7_IRQn);

	// Setup CButton3 interrupt
	MSS_GPIO_config(MSS_GPIO_8, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_8);
	NVIC_EnableIRQ(GPIO8_IRQn);

	// LCD Timer interrupt
	MSS_GPIO_config(MSS_GPIO_9, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_9);
	NVIC_EnableIRQ(GPIO9_IRQn);

	// MIDI Timer interrupt
	MSS_GPIO_config(MSS_GPIO_10, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
	MSS_GPIO_enable_irq(MSS_GPIO_10);
	NVIC_EnableIRQ(GPIO10_IRQn);

	Menu_init(&settings, &suitState);

	Suit_setMode(CONFIG);
}

void Suit_handleMIDIMessage(uint8_t *message, uint16_t length) {
	uint8_t channel;
	if (message[0] == 0x90) {
		if (suitState.state == PERFORMANCE) {
			channel = Suit_MIDIToLightChannel(message[1]);
			if (channel < LIGHT_CHANNELS) {
				Suit_turnOnLightChannel(channel);
			}
		} else {
			if (suitState.waitingForInput == 1 && suitState.inputType == MIDI) {
				*(settings.noteToMapTo) = (Note)message[1];
				suitState.waitingForInput = 0;
				Menu_goToParentMenu();
			}
		}
	} else if (message[0] == 0x80) {
		if (suitState.state == PERFORMANCE) {
			channel = Suit_MIDIToLightChannel(message[1]);
			if (channel < LIGHT_CHANNELS) {
				Suit_turnOffLightChannel(channel);
			}
		}
	}
}

void Suit_shiftXBeePackets() {
	volatile int i, j;
	for (i = 0; i < XBEE_PACKET_AVERAGE - 1; i++) {
		for (j = 0; j < XBEE_PACKET_LENGTH; j++) {
			xbeeState.data[i][j] = xbeeState.data[i + 1][j];
		}
	}
}

uint8_t Suit_getAveragedValue(uint8_t index) {
	volatile int i;
	uint32_t average = 0;
	//printf("start ");
	for (i = 0; i < XBEE_PACKET_AVERAGE - 1; i++) {
		//printf("%u ", xbeeState.data[i][index]);
		average += xbeeState.data[i][index];
	}
	//printf("\n\r");
	return (average / (XBEE_PACKET_AVERAGE - 1));
}

void Suit_turnOnLightChannel(uint8_t channel) {
	suitState.lightsHaveChanged = 1;
	suitState.activeLights |= (0x1 << channel);
}

void Suit_turnOffLightChannel(uint8_t channel) {
	suitState.lightsHaveChanged = 1;
	suitState.activeLights &= ~(0x1 << channel);
}

uint8_t Suit_MIDIToLightChannel(uint8_t note) {
	volatile int i;
	for (i = 0; i < LIGHT_CHANNELS; i++) {
		if (settings.suitLightMappings[i] == note) {
			return i;
		}
	}
	//printf("Invalid MIDI Light Channel note mapping %#x\n\r", note);
	return 255;
}

void Suit_newSensorValues() {
	//printf("Accel: (%u, %u, %u)\n\r", suitState.accelX, suitState.accelY, suitState.accelZ);
	//printf("Flex: %u\n\r", suitState.flexValue);
	//printf("Hand Height: %u\n\r", suitState.handHeight);

	if (suitState.state == PERFORMANCE) {
		uint8_t limitedAccelX = suitState.accelX;
		uint8_t limitedAccelY = suitState.accelY;
		uint8_t limitedFlex = suitState.flexValue;

		if (limitedAccelX < settings.accelMin) {
			limitedAccelX = settings.accelMin;
		} else if (limitedAccelX > settings.accelMax) {
			limitedAccelX = settings.accelMax;
		}

		if (limitedAccelY < settings.accelMin) {
			limitedAccelY = settings.accelMin;
		} else if (limitedAccelY > settings.accelMax) {
			limitedAccelY = settings.accelMax;
		}

		if (limitedFlex < settings.flexMin) {
			limitedFlex = settings.flexMin;
		} else if (limitedFlex > settings.flexMax) {
			limitedFlex = settings.flexMax;
		}

		uint8_t pitchBendOut = Suit_mapValue(limitedAccelY, settings.accelMin, settings.accelMax, settings.pitchBendMin, settings.pitchBendMax);
		uint8_t volumeOut = Suit_mapValue(limitedFlex, settings.flexMin, settings.flexMax, settings.controlMin, settings.controlMax);
		uint8_t controlOut = Suit_mapValue(limitedAccelX, settings.accelMin, settings.accelMax, settings.controlMin, settings.controlMax);
		MIDI_pitchWheelChange(pitchBendOut, settings.outputMIDIChannel);
		MIDI_controlChange(settings.volumeMIDIControl, volumeOut, settings.outputMIDIChannel);
		MIDI_controlChange(settings.accelYMIDIControl, controlOut, settings.outputMIDIChannel);

	}
}

void Suit_capButtonPressed() {
	if (suitState.state == PERFORMANCE) {
		if (suitState.noteActive == 1) {
			MIDI_noteOff(suitState.activeNote, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		}
		Note noteOut = Suit_mapValue(suitState.handHeight, settings.handHeightMin, settings.handHeightMax, settings.minNote, settings.maxNote);
		suitState.activeNote = noteOut;
		suitState.noteActive = 1;
		MIDI_noteOn(noteOut, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	} else {
		if (suitState.waitingForInput == 1) {
			if (suitState.inputType == SENSOR) {
				*(settings.valueToMapTo) = suitState.handHeight;
				suitState.waitingForInput = 0;
				Menu_goToParentMenu();
			}
		} else {
			Menu_select();
		}
	}
}

void Suit_capButtonReleased() {
	if (suitState.state == PERFORMANCE) {
		if (suitState.noteActive == 1) {
			suitState.noteActive = 0;
			MIDI_noteOff(suitState.activeNote, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		}
	}
}

void Suit_CButton0Pressed() {
	if (suitState.state == PERFORMANCE) {
		if (suitState.noteActive == 1) {
			suitState.noteActive = 0;
			MIDI_noteOff(suitState.activeNote, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		}
		Suit_setMode(CONFIG);
	} else {
		suitState.waitingForInput = 0;
		if (Menu_isAtRootMenu() == 1) {
			Suit_setMode(PERFORMANCE);
		} else {
			Menu_goToParentMenu();
		}
	}
}

void Suit_CButton1Pressed() {
	if (suitState.state == PERFORMANCE) {
		MIDI_noteOff(settings.CButton1Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		MIDI_noteOn(settings.CButton1Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	}
}

void Suit_CButton2Pressed() {
	if (suitState.state == PERFORMANCE) {
		MIDI_noteOff(settings.CButton2Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		MIDI_noteOn(settings.CButton2Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	}
}

void Suit_CButton3Pressed() {
	if (suitState.state == PERFORMANCE) {
		MIDI_noteOff(settings.CButton3Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		MIDI_noteOn(settings.CButton3Mapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	}
}

void Suit_LPiezoPressed() {
	if (suitState.state == PERFORMANCE) {
		MIDI_noteOff(settings.LPiezoMapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		MIDI_noteOn(settings.LPiezoMapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	} else {
		if (suitState.waitingForInput == 0) {
			Menu_moveUp();
		}
	}
}

void Suit_RPiezoPressed() {
	if (suitState.state == PERFORMANCE) {
		MIDI_noteOff(settings.RPiezoMapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
		MIDI_noteOn(settings.RPiezoMapping, MIDI_DEFAULT_VELOCITY, settings.outputMIDIChannel);
	} else {
		if (suitState.waitingForInput == 0) {
			Menu_moveDown();
		}
	}
}

// Taken from Arduino
uint8_t Suit_mapValue(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void Suit_setMode(State state) {
	suitState.state = state;
	if (state == PERFORMANCE) {
		Suit_displayStatus();
	} else {
		Menu_displayCurrentMenu();
	}
}

void Suit_displayStatus() {
	suitState.okToWriteLcd = 0;
	LCD_clearScreen();
	LCD_drawString("Accel X:", 0, 0);
	LCD_drawString(IntNames[suitState.accelX], LCD_VALUE_X, 0);
	LCD_drawString("Accel Y:", 0, LCD_LINE_HEIGHT);
	LCD_drawString(IntNames[suitState.accelY], LCD_VALUE_X, LCD_LINE_HEIGHT);
	LCD_drawString("Accel Z:", 0, LCD_LINE_HEIGHT * 2);
	LCD_drawString(IntNames[suitState.accelZ], LCD_VALUE_X, LCD_LINE_HEIGHT * 2);
	LCD_drawString("Flex Value:", 0, LCD_LINE_HEIGHT * 3);
	LCD_drawString(IntNames[suitState.flexValue], LCD_VALUE_X, LCD_LINE_HEIGHT * 3);
	LCD_drawString("Hand Height:", 0, LCD_LINE_HEIGHT * 4);
	LCD_drawString(IntNames[suitState.handHeight], LCD_VALUE_X, LCD_LINE_HEIGHT * 4);
	LCD_drawString("Active Note:", 0, LCD_LINE_HEIGHT * 5);
	if (suitState.noteActive == 1) {
		LCD_drawString(NoteNames[suitState.activeNote], LCD_VALUE_X, LCD_LINE_HEIGHT * 5);
	} else {
		LCD_drawString("   ", LCD_VALUE_X, LCD_LINE_HEIGHT * 5);
	}
	LCD_drawString("Active Lights:", 0, LCD_LINE_HEIGHT * 6);
	LCD_drawString(IntNames[suitState.activeLights], LCD_VALUE_X, LCD_LINE_HEIGHT * 6);
}

void Suit_updateStatus() {
	if (suitState.okToWriteLcd == 0) {
		suitState.okToWriteLcd = 1;
		return;
	}
	char* clearString = "   ";
	LCD_drawString(clearString, LCD_VALUE_X, 0);
	LCD_drawString(IntNames[suitState.accelX], LCD_VALUE_X, 0);
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT);
	LCD_drawString(IntNames[suitState.accelY], LCD_VALUE_X, LCD_LINE_HEIGHT);
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 2);
	LCD_drawString(IntNames[suitState.accelZ], LCD_VALUE_X, LCD_LINE_HEIGHT * 2);
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 3);
	LCD_drawString(IntNames[suitState.flexValue], LCD_VALUE_X, LCD_LINE_HEIGHT * 3);
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 4);
	LCD_drawString(IntNames[suitState.handHeight], LCD_VALUE_X, LCD_LINE_HEIGHT * 4);
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 5);
	if (suitState.noteActive == 1) {
		LCD_drawString(NoteNames[suitState.activeNote], LCD_VALUE_X, LCD_LINE_HEIGHT * 5);
	} else {
		LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 5);
	}
	LCD_drawString(clearString, LCD_VALUE_X, LCD_LINE_HEIGHT * 6);
	LCD_drawString(IntNames[suitState.activeLights], LCD_VALUE_X, LCD_LINE_HEIGHT * 6);
}
