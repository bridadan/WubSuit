#include <inttypes.h>
#include "menu.h"
#include "lcd.h"
#include "suit.h"
#include "constants.h"

Menu* currentMenu;
uint8_t selectedMenu;
Menu menus[MENU_COUNT];
Settings *settings;
SuitState *suitState;

char* NoteNames[MAX_NOTES] = {
	"C0", "C#0", "D0", "D#0", "E0", "F0", "F#0", "G0", "G#0", "A0", "A#0", "B0",
	"C1", "C#1", "D1", "D#1", "E1", "F1", "F#1", "G1", "G#1", "A1", "A#1", "B1",
	"C2", "C#2", "D2", "D#2", "E2", "F2", "F#2", "G2", "G#2", "A2", "A#2", "B2",
	"C3", "C#3", "D3", "D#3", "E3", "F3", "F#3", "G3", "G#3", "A3", "A#3", "B3",
	"C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
	"C5", "C#5", "D5", "D#5", "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5",
	"C6", "C#6", "D6", "D#6", "E6", "F6", "F#6", "G6", "G#6", "A6", "A#6", "B6",
	"C7", "C#7", "D7", "D#7", "E7", "F7", "F#7", "G7", "G#7", "A7", "A#7", "B7",
	"C8", "C#8", "D8", "D#8", "E8", "F8", "F#8", "G8", "G#8", "A8", "A#8", "B8",
	"C9", "C#9", "D9", "D#9", "E9", "F9", "F#9", "G9", "G#9", "A9", "A#9", "B9",
	"C10", "C#10", "D10", "D#10", "E10", "F10", "F#10", "G10"
};

char* KeySignatureNames[MAX_KEYSIGNATURES] = {
	"Chromatic", "C Major", "C Minor"
};

void Menu_setKeySignature(uint8_t value) {
	settings->keySignature = ((KeySignature) (value));
	printf("Key signature is now %s\n\r", KeySignatureNames[settings->keySignature]);
}

void Menu_init(Settings *setS, SuitState *suitS) {
	printf("%u", setS);
	settings = setS;
	suitState = suitS;

	currentMenu = &(menus[0]);
	selectedMenu = 0;

	// Top Level Menu

	menus[0].name = "Main Menu";
	menus[0].submenusCount = 4;
	menus[0].previousMenu = 0;

	menus[0].submenus[0] = &(menus[1]); // Note Output
	menus[0].submenus[1] = &(menus[2]); // MIDI Mappings
	menus[0].submenus[2] = &(menus[11]); // Calibrate
	menus[0].submenus[3] = &(menus[14]); // Suit Lights

	// Main Menus

	menus[1].name = "Note Output";
	menus[1].submenusCount = 3;
	menus[1].submenus[0] = &(menus[3]); // Key Signature
	menus[1].submenus[1] = &(menus[9]); // Min Note
	menus[1].submenus[2] = &(menus[10]); // Max Note
	menus[1].previousMenu = &(menus[0]);

	menus[2].name = "MIDI Mappings";
	menus[2].submenusCount = 2;
	menus[2].submenus[0] = &(menus[7]); // Left Foot
	menus[2].submenus[1] = &(menus[8]); // Right Foot
	menus[2].previousMenu = &(menus[0]);

	// Note Output

	menus[3].name = "Key Signature";
	menus[3].submenusCount = 3;
	menus[3].submenus[0] = &(menus[22]); // Chromatic
	menus[3].submenus[1] = &(menus[23]); // C Major
	menus[3].submenus[2] = &(menus[24]); // C Minor
	menus[3].previousMenu = &(menus[1]);

	menus[22].name = "Chromatic";
	menus[22].submenusCount = 0;
	menus[22].inputType = VALUE;
	menus[22].keySigValue = CHROMATIC;
	menus[22].previousMenu = &(menus[1]);

	menus[23].name = "C Major";
	menus[23].submenusCount = 0;
	menus[23].inputType = VALUE;
	menus[22].keySigValue = CMAJOR;
	menus[23].previousMenu = &(menus[1]);

	menus[24].name = "C Minor";
	menus[24].submenusCount = 0;
	menus[24].inputType = VALUE;
	menus[22].keySigValue = CMINOR;
	menus[24].previousMenu = &(menus[1]);

	menus[9].name = "Min Note";
	menus[9].submenusCount = 0;
	menus[9].inputType = MIDI;
	menus[9].noteValue = &(settings->minNote);
	menus[9].previousMenu = &(menus[1]);
	menus[9].valueString = Menu_getNoteString;

	menus[10].name = "Max Note";
	menus[10].submenusCount = 0;
	menus[10].inputType = MIDI;
	menus[10].noteValue = &(settings->maxNote);
	menus[10].previousMenu = &(menus[1]);
	menus[10].valueString = Menu_getNoteString;

	// MIDI Mappings

	menus[7].name = "Left Foot";
	menus[7].submenusCount = 0;
	menus[7].inputType = MIDI;
	menus[7].noteValue = &(settings->LPiezoMapping);
	menus[7].previousMenu = &(menus[2]);
	menus[7].valueString = Menu_getNoteString;

	menus[8].name = "Right Foot";
	menus[8].submenusCount = 0;
	menus[8].inputType = MIDI;
	menus[8].noteValue = &(settings->RPiezoMapping);
	menus[8].previousMenu = &(menus[2]);
	menus[8].valueString = Menu_getNoteString;

	// Calibrate

	menus[11].name = "Calibrate";
	menus[11].submenusCount = 2;
	menus[11].submenus[0] = &(menus[11]);
	menus[11].submenus[1] = &(menus[12]);
	menus[11].previousMenu = &(menus[0]);

	menus[12].name = "Hand Height Min";
	menus[12].submenusCount = 0;
	menus[12].inputType = SENSOR;
	menus[12].intValue = &(settings->handHeightMin);
	menus[12].previousMenu = &(menus[11]);

	menus[13].name = "Hand Height Max";
	menus[13].submenusCount = 0;
	menus[13].inputType = SENSOR;
	menus[13].intValue = &(settings->handHeightMax);
	menus[13].previousMenu = &(menus[11]);

	// Suit Lights

	menus[14].name = "Suit Lights";
	menus[14].submenusCount = 7;
	menus[14].submenus[0] = &(menus[15]);
	menus[14].submenus[1] = &(menus[16]);
	menus[14].submenus[2] = &(menus[17]);
	menus[14].submenus[3] = &(menus[18]);
	menus[14].submenus[4] = &(menus[19]);
	menus[14].submenus[5] = &(menus[20]);
	menus[14].submenus[6] = &(menus[21]);
	menus[14].previousMenu = &(menus[0]);

	menus[15].name = "Right Arm";
	menus[15].submenusCount = 0;
	menus[15].inputType = MIDI;
	menus[15].noteValue = &(settings->suitLightMappings[0]);
	menus[15].previousMenu = &(menus[14]);
	menus[15].valueString = Menu_getNoteString;

	menus[16].name = "Left Arm";
	menus[16].submenusCount = 0;
	menus[16].inputType = MIDI;
	menus[16].noteValue = &(settings->suitLightMappings[1]);
	menus[16].previousMenu = &(menus[14]);
	menus[16].valueString = Menu_getNoteString;

	menus[17].name = "Right Body";
	menus[17].submenusCount = 0;
	menus[17].inputType = MIDI;
	menus[17].noteValue = &(settings->suitLightMappings[2]);
	menus[17].previousMenu = &(menus[14]);
	menus[17].valueString = Menu_getNoteString;

	menus[18].name = "Left Body";
	menus[18].submenusCount = 0;
	menus[18].inputType = MIDI;
	menus[18].noteValue = &(settings->suitLightMappings[3]);
	menus[18].previousMenu = &(menus[14]);
	menus[18].valueString = Menu_getNoteString;

	menus[19].name = "Right Leg";
	menus[19].submenusCount = 0;
	menus[19].inputType = MIDI;
	menus[19].noteValue = &(settings->suitLightMappings[4]);
	menus[19].previousMenu = &(menus[14]);
	menus[19].valueString = Menu_getNoteString;

	menus[20].name = "Left Leg";
	menus[20].submenusCount = 0;
	menus[20].inputType = MIDI;
	menus[20].noteValue = &(settings->suitLightMappings[5]);
	menus[20].previousMenu = &(menus[14]);
	menus[20].valueString = Menu_getNoteString;

	menus[21].name = "Chest";
	menus[21].submenusCount = 0;
	menus[21].inputType = MIDI;
	menus[21].noteValue = &(settings->suitLightMappings[6]);
	menus[21].previousMenu = &(menus[14]);
	menus[21].valueString = Menu_getNoteString;
}

void Menu_displayCurrentMenu() {
	volatile uint8_t i;
	volatile Menu *menu;

	LCD_clearScreen();
	LCD_setSelectorPosition(selectedMenu);
	LCD_drawString(currentMenu->name, 10, 0);

	for (i = 0; i < currentMenu->submenusCount; i++) {
		menu = currentMenu->submenus[i];
		LCD_drawString(menu->name, LCD_MENU_OPTION_X, (LCD_LINE_HEIGHT * (i + 1)));
		if (menu->submenusCount == 0 && menu->inputType != VALUE) {
			LCD_drawString(menu->valueString(menu), LCD_MENU_VALUE_X, (LCD_LINE_HEIGHT * (i + 1)));
		}
	}
}

void Menu_setMenu(Menu* menu) {
	currentMenu = menu;
	selectedMenu = 0;
	Menu_displayCurrentMenu(currentMenu);
}

void Menu_moveDown() {
	if (selectedMenu < currentMenu->submenusCount - 1) {
		selectedMenu++;
		LCD_setSelectorPosition(selectedMenu);
	}
}

void Menu_moveUp() {
	if (selectedMenu > 0) {
		selectedMenu--;
		LCD_setSelectorPosition(selectedMenu);
	}
}

void Menu_select() {
	Menu *menu = currentMenu->submenus[selectedMenu];
	if (menu->submenusCount == 0) {
		if (menu->inputType == VALUE) {
			settings->keySignature = menu->keySigValue;
		} else {
			Menu_waitForInput(menu);
		}

		Menu_setMenu(menu->previousMenu);
	} else {
		Menu_setMenu(menu);
	}
}

char* Menu_getNoteString(Menu* menu) {
	return NoteNames[*(menu->noteValue)];
}

void Menu_waitForInput(Menu* menu) {
	suitState->waitingForInput = 1;
	suitState->inputType = menu->inputType;

	while(suitState->waitingForInput == 1) {
		// waiting until done waiting for input
	}

	if (menu->inputType == MIDI) {
		*(menu->noteValue) = suitState->activeNote;
	} else if (menu->inputType == SENSOR) {
		*(menu->intValue) = suitState->handHeight;
	} else if (menu->inputType == ARRAY) {

	}

	// Update menu value option?
}
