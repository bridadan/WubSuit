#include <inttypes.h>
#include "menu.h"
#include "lcd.h"
#include "suit.h"
#include "constants.h"

Menu* currentMenu;
uint8_t selectedMenu;
Menu menus[MENU_COUNT];
Settings *settingsPtr;
SuitState *suitStatePtr;

void Menu_setKeySignature(uint8_t value) {
	settingsPtr->keySignature = ((KeySignature) (value));
	printf("Key signature is now %s\n\r", KeySignatureNames[settingsPtr->keySignature]);
}

void Menu_init(Settings *setS, SuitState *suitS) {
	printf("%u\n\r", &(setS->suitLightMappings[1]));
	printf("%u\n\r", setS->suitLightMappings[1]);
	settingsPtr = setS;
	suitStatePtr = suitS;


	printf("%u\n\r", &(settingsPtr->suitLightMappings[1]));
	printf("%u\n\r", settingsPtr->suitLightMappings[1]);

	currentMenu = &(menus[0]);
	selectedMenu = 0;

	// Top Level Menu

	menus[0].name = "Main Menu";
	menus[0].submenusCount = 4;
	menus[0].previousMenu = 0;

	menus[0].submenus[0] = &(menus[1]); // Note Output
	menus[0].submenus[1] = &(menus[2]); // MIDI Mappings
	menus[0].submenus[2] = &(menus[11]); // Calibrate
	menus[0].submenus[3] = &(menus[14]); // Suit Lights

	// Main Menus

	menus[1].name = "Note Output";
	menus[1].submenusCount = 3;
	menus[1].submenus[0] = &(menus[3]); // Key Signature
	menus[1].submenus[1] = &(menus[9]); // Min Note
	menus[1].submenus[2] = &(menus[10]); // Max Note
	menus[1].previousMenu = &(menus[0]);

	menus[2].name = "MIDI Mappings";
	menus[2].submenusCount = 2;
	menus[2].submenus[0] = &(menus[7]); // Left Foot
	menus[2].submenus[1] = &(menus[8]); // Right Foot
	menus[2].previousMenu = &(menus[0]);

	// Note Output

	menus[3].name = "Key Signature";
	menus[3].submenusCount = 3;
	menus[3].submenus[0] = &(menus[22]); // Chromatic
	menus[3].submenus[1] = &(menus[23]); // C Major
	menus[3].submenus[2] = &(menus[24]); // C Minor
	menus[3].previousMenu = &(menus[1]);

	menus[22].name = "Chromatic";
	menus[22].submenusCount = 0;
	menus[22].inputType = VALUE;
	menus[22].keySigValue = CHROMATIC;
	menus[22].previousMenu = &(menus[1]);

	menus[23].name = "C Major";
	menus[23].submenusCount = 0;
	menus[23].inputType = VALUE;
	menus[22].keySigValue = CMAJOR;
	menus[23].previousMenu = &(menus[1]);

	menus[24].name = "C Minor";
	menus[24].submenusCount = 0;
	menus[24].inputType = VALUE;
	menus[22].keySigValue = CMINOR;
	menus[24].previousMenu = &(menus[1]);

	menus[9].name = "Min Note";
	menus[9].submenusCount = 0;
	menus[9].inputType = MIDI;
	menus[9].noteValue = &(settingsPtr->minNote);
	menus[9].previousMenu = &(menus[1]);
	menus[9].valueString = Menu_getNoteString;

	menus[10].name = "Max Note";
	menus[10].submenusCount = 0;
	menus[10].inputType = MIDI;
	menus[10].noteValue = &(settingsPtr->maxNote);
	menus[10].previousMenu = &(menus[1]);
	menus[10].valueString = Menu_getNoteString;

	// MIDI Mappings

	menus[7].name = "Left Foot";
	menus[7].submenusCount = 0;
	menus[7].inputType = MIDI;
	menus[7].noteValue = &(settingsPtr->LPiezoMapping);
	menus[7].previousMenu = &(menus[2]);
	menus[7].valueString = Menu_getNoteString;

	menus[8].name = "Right Foot";
	menus[8].submenusCount = 0;
	menus[8].inputType = MIDI;
	menus[8].noteValue = &(settingsPtr->RPiezoMapping);
	menus[8].previousMenu = &(menus[2]);
	menus[8].valueString = Menu_getNoteString;

	// Calibrate

	menus[11].name = "Calibrate";
	menus[11].submenusCount = 2;
	menus[11].submenus[0] = &(menus[12]);
	menus[11].submenus[1] = &(menus[13]);
	menus[11].previousMenu = &(menus[0]);

	menus[12].name = "Hand Height Min";
	menus[12].submenusCount = 0;
	menus[12].inputType = SENSOR;
	menus[12].intValue = &(settingsPtr->handHeightMin);
	menus[12].previousMenu = &(menus[11]);
	menus[12].valueString = Menu_getIntString;

	menus[13].name = "Hand Height Max";
	menus[13].submenusCount = 0;
	menus[13].inputType = SENSOR;
	menus[13].intValue = &(settingsPtr->handHeightMax);
	menus[13].previousMenu = &(menus[11]);
	menus[13].valueString = Menu_getIntString;

	// Suit Lights

	menus[14].name = "Suit Lights";
	menus[14].submenusCount = 7;
	menus[14].submenus[0] = &(menus[15]);
	menus[14].submenus[1] = &(menus[16]);
	menus[14].submenus[2] = &(menus[17]);
	menus[14].submenus[3] = &(menus[18]);
	menus[14].submenus[4] = &(menus[19]);
	menus[14].submenus[5] = &(menus[20]);
	menus[14].submenus[6] = &(menus[21]);
	menus[14].previousMenu = &(menus[0]);

	menus[15].name = "Right Arm";
	menus[15].submenusCount = 0;
	menus[15].inputType = MIDI;
	menus[15].noteValue = &(settingsPtr->suitLightMappings[0]);
	menus[15].previousMenu = &(menus[14]);
	menus[15].valueString = Menu_getNoteString;

	menus[16].name = "Left Arm";
	menus[16].submenusCount = 0;
	menus[16].inputType = MIDI;
	menus[16].noteValue = &(settingsPtr->suitLightMappings[1]);
	menus[16].previousMenu = &(menus[14]);
	menus[16].valueString = Menu_getNoteString;

	menus[17].name = "Right Body";
	menus[17].submenusCount = 0;
	menus[17].inputType = MIDI;
	menus[17].noteValue = &(settingsPtr->suitLightMappings[2]);
	menus[17].previousMenu = &(menus[14]);
	menus[17].valueString = Menu_getNoteString;

	menus[18].name = "Left Body";
	menus[18].submenusCount = 0;
	menus[18].inputType = MIDI;
	menus[18].noteValue = &(settingsPtr->suitLightMappings[3]);
	menus[18].previousMenu = &(menus[14]);
	menus[18].valueString = Menu_getNoteString;

	menus[19].name = "Right Leg";
	menus[19].submenusCount = 0;
	menus[19].inputType = MIDI;
	menus[19].noteValue = &(settingsPtr->suitLightMappings[4]);
	menus[19].previousMenu = &(menus[14]);
	menus[19].valueString = Menu_getNoteString;

	menus[20].name = "Left Leg";
	menus[20].submenusCount = 0;
	menus[20].inputType = MIDI;
	menus[20].noteValue = &(settingsPtr->suitLightMappings[5]);
	menus[20].previousMenu = &(menus[14]);
	menus[20].valueString = Menu_getNoteString;

	menus[21].name = "Chest";
	menus[21].submenusCount = 0;
	menus[21].inputType = MIDI;
	menus[21].noteValue = &(settingsPtr->suitLightMappings[6]);
	menus[21].previousMenu = &(menus[14]);
	menus[21].valueString = Menu_getNoteString;
}

void Menu_displayCurrentMenu() {
	volatile uint8_t i;
	volatile Menu *menu;

	LCD_clearScreen();
	LCD_drawString(">", 0, LCD_LINE_HEIGHT * (selectedMenu+ 1));
	LCD_drawString(currentMenu->name, 10, 0);

	for (i = 0; i < currentMenu->submenusCount; i++) {
		menu = currentMenu->submenus[i];
		LCD_drawString(menu->name, LCD_MENU_OPTION_X, (LCD_LINE_HEIGHT * (i + 1)));
		if (menu->submenusCount == 0 && menu->inputType != VALUE) {
			LCD_drawString(menu->valueString(menu), LCD_MENU_VALUE_X, (LCD_LINE_HEIGHT * (i + 1)));
		}
	}
}


void Menu_setMenu(Menu* menu) {
	currentMenu = menu;
	selectedMenu = 0;
	Menu_displayCurrentMenu(currentMenu);
}

void Menu_moveDown() {
	if (selectedMenu < currentMenu->submenusCount - 1) {
		LCD_eraseBlock(0, 0, 50, 10);
		//LCD_eraseBlock(0, LCD_SELECTOR_WIDTH, LCD_LINE_HEIGHT * (selectedMenu + 1), LCD_LINE_HEIGHT * (selectedMenu + 2));
		selectedMenu++;
		LCD_drawString(">", 0, LCD_LINE_HEIGHT * (selectedMenu + 1));
	}
}

void Menu_moveUp() {
	if (selectedMenu > 0) {
		LCD_eraseBlock(0, 0, 50, 10);
		//LCD_eraseBlock(0, LCD_SELECTOR_WIDTH, LCD_LINE_HEIGHT * (selectedMenu + 1), LCD_LINE_HEIGHT * (selectedMenu + 2));
		selectedMenu--;
		LCD_drawString(">", 0, LCD_LINE_HEIGHT * (selectedMenu + 1));
	}
}

void Menu_select() {
	Menu *menu = currentMenu->submenus[selectedMenu];
	if (menu->submenusCount == 0) {
		if (menu->inputType == VALUE) {
			settingsPtr->keySignature = menu->keySigValue;
			Menu_setMenu(menu->previousMenu);
		} else {
			Menu_waitForInput(menu);
			currentMenu = menu;
		}
	} else {
		Menu_setMenu(menu);
	}
}

char* Menu_getNoteString(Menu* menu) {
	return NoteNames[*(menu->noteValue)];
}

char* Menu_getIntString(Menu* menu) {
	return IntNames[*(menu->intValue)];
}

void Menu_waitForInput(Menu* menu) {
	suitStatePtr->waitingForInput = 1;
	suitStatePtr->inputType = menu->inputType;

	if (menu->inputType == MIDI) {
		settingsPtr->noteToMapTo = menu->noteValue;
	} else if (menu->inputType == SENSOR) {
		settingsPtr->valueToMapTo = menu->intValue;
	}

	Menu_showInputWaitingScreen(menu->inputType);
}

uint8_t Menu_isAtRootMenu() {
	if (currentMenu->previousMenu == 0) {
		return 1;
	} else {
		return 0;
	}
}

void Menu_goToParentMenu() {
	Menu_setMenu(currentMenu->previousMenu);
}

void Menu_showInputWaitingScreen(InputType type) {
	LCD_clearScreen();
	if (type == MIDI) {
		LCD_drawString("Waiting on MIDI input...", 0, 0);
	} else {
		LCD_drawString("Waiting on Sensor input...", 0, 0);
	}
}
